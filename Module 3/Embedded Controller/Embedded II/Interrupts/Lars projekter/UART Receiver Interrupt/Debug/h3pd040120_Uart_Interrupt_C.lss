
h3pd040120_Uart_Interrupt_C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003e  00800200  000003a0  00000434  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003a0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  0080023e  0080023e  00000472  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000472  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  000004e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f0f  00000000  00000000  00000564  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d32  00000000  00000000  00001473  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004e4  00000000  00000000  000021a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b0  00000000  00000000  0000268c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000692  00000000  00000000  0000283c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000345  00000000  00000000  00002ece  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00003213  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	2a c1       	rjmp	.+596    	; 0x2ba <__vector_25>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e0 ea       	ldi	r30, 0xA0	; 160
  fc:	f3 e0       	ldi	r31, 0x03	; 3
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	ae 33       	cpi	r26, 0x3E	; 62
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	ae e3       	ldi	r26, 0x3E	; 62
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a4 34       	cpi	r26, 0x44	; 68
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	33 d0       	rcall	.+102    	; 0x186 <main>
 120:	3d c1       	rjmp	.+634    	; 0x39c <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <ConvertReceivedChar>:
#include <avr/interrupt.h>
#include "uart.h"
#include "ProjectDefines.h"

void ConvertReceivedChar(char *ReceivedChar)
{
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
 128:	1f 92       	push	r1
 12a:	1f 92       	push	r1
 12c:	cd b7       	in	r28, 0x3d	; 61
 12e:	de b7       	in	r29, 0x3e	; 62
 130:	9a 83       	std	Y+2, r25	; 0x02
 132:	89 83       	std	Y+1, r24	; 0x01
	// Den smarte måde at få konverteret små bogstaver om til store bogstaver og
	// modsat er ved brug af Xor, som vi tidligere har set. Så kan vi klare det i
	// én linje kode.
	//*ReceivedChar ^= Upper_Lower_Bit_Value;
	if ( ((*ReceivedChar >= 0x41) && (*ReceivedChar <= 0x5D)) ||
 134:	89 81       	ldd	r24, Y+1	; 0x01
 136:	9a 81       	ldd	r25, Y+2	; 0x02
 138:	fc 01       	movw	r30, r24
 13a:	80 81       	ld	r24, Z
 13c:	81 34       	cpi	r24, 0x41	; 65
 13e:	30 f0       	brcs	.+12     	; 0x14c <ConvertReceivedChar+0x28>
 140:	89 81       	ldd	r24, Y+1	; 0x01
 142:	9a 81       	ldd	r25, Y+2	; 0x02
 144:	fc 01       	movw	r30, r24
 146:	80 81       	ld	r24, Z
 148:	8e 35       	cpi	r24, 0x5E	; 94
 14a:	60 f0       	brcs	.+24     	; 0x164 <ConvertReceivedChar+0x40>
	     ((*ReceivedChar >= 0x61) && (*ReceivedChar <= 0x7D)))
 14c:	89 81       	ldd	r24, Y+1	; 0x01
 14e:	9a 81       	ldd	r25, Y+2	; 0x02
 150:	fc 01       	movw	r30, r24
 152:	80 81       	ld	r24, Z
{
	// Den smarte måde at få konverteret små bogstaver om til store bogstaver og
	// modsat er ved brug af Xor, som vi tidligere har set. Så kan vi klare det i
	// én linje kode.
	//*ReceivedChar ^= Upper_Lower_Bit_Value;
	if ( ((*ReceivedChar >= 0x41) && (*ReceivedChar <= 0x5D)) ||
 154:	81 36       	cpi	r24, 0x61	; 97
 156:	88 f0       	brcs	.+34     	; 0x17a <ConvertReceivedChar+0x56>
	     ((*ReceivedChar >= 0x61) && (*ReceivedChar <= 0x7D)))
 158:	89 81       	ldd	r24, Y+1	; 0x01
 15a:	9a 81       	ldd	r25, Y+2	; 0x02
 15c:	fc 01       	movw	r30, r24
 15e:	80 81       	ld	r24, Z
 160:	8e 37       	cpi	r24, 0x7E	; 126
 162:	58 f4       	brcc	.+22     	; 0x17a <ConvertReceivedChar+0x56>
	{
		*ReceivedChar = *ReceivedChar ^ Upper_Lower_Bit_Value;
 164:	89 81       	ldd	r24, Y+1	; 0x01
 166:	9a 81       	ldd	r25, Y+2	; 0x02
 168:	fc 01       	movw	r30, r24
 16a:	90 81       	ld	r25, Z
 16c:	80 e2       	ldi	r24, 0x20	; 32
 16e:	29 2f       	mov	r18, r25
 170:	28 27       	eor	r18, r24
 172:	89 81       	ldd	r24, Y+1	; 0x01
 174:	9a 81       	ldd	r25, Y+2	; 0x02
 176:	fc 01       	movw	r30, r24
 178:	20 83       	st	Z, r18
	}
}
 17a:	00 00       	nop
 17c:	0f 90       	pop	r0
 17e:	0f 90       	pop	r0
 180:	df 91       	pop	r29
 182:	cf 91       	pop	r28
 184:	08 95       	ret

00000186 <main>:


int main(void)
{
 186:	cf 93       	push	r28
 188:	df 93       	push	r29
 18a:	1f 92       	push	r1
 18c:	cd b7       	in	r28, 0x3d	; 61
 18e:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t TestVariable;
	RS232Init();
 190:	0c d0       	rcall	.+24     	; 0x1aa <RS232Init>
	printf("\nh3pd100120 Embedded C styrer !!!\n");
 192:	8c e1       	ldi	r24, 0x1C	; 28
 194:	92 e0       	ldi	r25, 0x02	; 2
	
	Enable_UART_Receive_Interrupt();
 196:	d2 d0       	rcall	.+420    	; 0x33c <puts>
 198:	7f d0       	rcall	.+254    	; 0x298 <Enable_UART_Receive_Interrupt>
	
	sei();					// Enable the Global Interrupt Enable flag so that interrupts can be processed
 19a:	78 94       	sei
    {
		// Koden herunder har intet med Interrupt at gøre. Koden er 
		// udelukkende taget med for at vise, at man i et sprog som C 
		// let kan komme til at "dumme" sig lidt. Se nærmere beskrivelse 
		// i kommentarerne inde i if blokken.
		TestVariable = 0;
 19c:	19 82       	std	Y+1, r1	; 0x01
		if (TestVariable == 1)
 19e:	89 81       	ldd	r24, Y+1	; 0x01
 1a0:	81 30       	cpi	r24, 0x01	; 1
 1a2:	e1 f7       	brne	.-8      	; 0x19c <main+0x16>
			// en compiler fejl, hvis man glemmer et = tegn som vist i linjen herunder.
			// if (1 = TestVariable)
			// Og her er vi faktisk rigtig glade for at få en compiler fejl, da en
			// sådan fejl bliver afsløret efter 3 sekunder og ikke efter 3 måneder !!!
			
			TestVariable = 2;
 1a4:	82 e0       	ldi	r24, 0x02	; 2
 1a6:	89 83       	std	Y+1, r24	; 0x01
		}
    }
 1a8:	f9 cf       	rjmp	.-14     	; 0x19c <main+0x16>

000001aa <RS232Init>:
}

void Disable_UART_Receive_Interupt()
{
	UCSR0B &= ~(1 << RXCIE0); // Disable the USART Recieve Complete interrupt (USART_RXC)
}
 1aa:	cf 93       	push	r28
 1ac:	df 93       	push	r29
 1ae:	cd b7       	in	r28, 0x3d	; 61
 1b0:	de b7       	in	r29, 0x3e	; 62
 1b2:	84 ec       	ldi	r24, 0xC4	; 196
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	27 e6       	ldi	r18, 0x67	; 103
 1b8:	fc 01       	movw	r30, r24
 1ba:	20 83       	st	Z, r18
 1bc:	85 ec       	ldi	r24, 0xC5	; 197
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	fc 01       	movw	r30, r24
 1c2:	10 82       	st	Z, r1
 1c4:	80 ec       	ldi	r24, 0xC0	; 192
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	fc 01       	movw	r30, r24
 1ca:	10 82       	st	Z, r1
 1cc:	81 ec       	ldi	r24, 0xC1	; 193
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	28 e1       	ldi	r18, 0x18	; 24
 1d2:	fc 01       	movw	r30, r24
 1d4:	20 83       	st	Z, r18
 1d6:	82 ec       	ldi	r24, 0xC2	; 194
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	26 e0       	ldi	r18, 0x06	; 6
 1dc:	fc 01       	movw	r30, r24
 1de:	20 83       	st	Z, r18
 1e0:	05 d0       	rcall	.+10     	; 0x1ec <SetupOutputStreamToUart>
 1e2:	12 d0       	rcall	.+36     	; 0x208 <SetupInputStreamToUart>
 1e4:	00 00       	nop
 1e6:	df 91       	pop	r29
 1e8:	cf 91       	pop	r28
 1ea:	08 95       	ret

000001ec <SetupOutputStreamToUart>:
 1ec:	cf 93       	push	r28
 1ee:	df 93       	push	r29
 1f0:	cd b7       	in	r28, 0x3d	; 61
 1f2:	de b7       	in	r29, 0x3e	; 62
 1f4:	80 e0       	ldi	r24, 0x00	; 0
 1f6:	92 e0       	ldi	r25, 0x02	; 2
 1f8:	90 93 41 02 	sts	0x0241, r25	; 0x800241 <__data_end+0x3>
 1fc:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <__data_end+0x2>
 200:	00 00       	nop
 202:	df 91       	pop	r29
 204:	cf 91       	pop	r28
 206:	08 95       	ret

00000208 <SetupInputStreamToUart>:
 208:	cf 93       	push	r28
 20a:	df 93       	push	r29
 20c:	cd b7       	in	r28, 0x3d	; 61
 20e:	de b7       	in	r29, 0x3e	; 62
 210:	8e e0       	ldi	r24, 0x0E	; 14
 212:	92 e0       	ldi	r25, 0x02	; 2
 214:	90 93 3f 02 	sts	0x023F, r25	; 0x80023f <__data_end+0x1>
 218:	80 93 3e 02 	sts	0x023E, r24	; 0x80023e <__data_end>
 21c:	00 00       	nop
 21e:	df 91       	pop	r29
 220:	cf 91       	pop	r28
 222:	08 95       	ret

00000224 <uart_getch>:
 224:	cf 93       	push	r28
 226:	df 93       	push	r29
 228:	1f 92       	push	r1
 22a:	1f 92       	push	r1
 22c:	cd b7       	in	r28, 0x3d	; 61
 22e:	de b7       	in	r29, 0x3e	; 62
 230:	9a 83       	std	Y+2, r25	; 0x02
 232:	89 83       	std	Y+1, r24	; 0x01
 234:	00 00       	nop
 236:	80 ec       	ldi	r24, 0xC0	; 192
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	fc 01       	movw	r30, r24
 23c:	80 81       	ld	r24, Z
 23e:	88 23       	and	r24, r24
 240:	d4 f7       	brge	.-12     	; 0x236 <uart_getch+0x12>
 242:	86 ec       	ldi	r24, 0xC6	; 198
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	fc 01       	movw	r30, r24
 248:	80 81       	ld	r24, Z
 24a:	88 2f       	mov	r24, r24
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	0f 90       	pop	r0
 250:	0f 90       	pop	r0
 252:	df 91       	pop	r29
 254:	cf 91       	pop	r28
 256:	08 95       	ret

00000258 <uart_putch>:
 258:	cf 93       	push	r28
 25a:	df 93       	push	r29
 25c:	00 d0       	rcall	.+0      	; 0x25e <uart_putch+0x6>
 25e:	cd b7       	in	r28, 0x3d	; 61
 260:	de b7       	in	r29, 0x3e	; 62
 262:	89 83       	std	Y+1, r24	; 0x01
 264:	7b 83       	std	Y+3, r23	; 0x03
 266:	6a 83       	std	Y+2, r22	; 0x02
 268:	00 00       	nop
 26a:	80 ec       	ldi	r24, 0xC0	; 192
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	fc 01       	movw	r30, r24
 270:	80 81       	ld	r24, Z
 272:	88 2f       	mov	r24, r24
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	80 72       	andi	r24, 0x20	; 32
 278:	99 27       	eor	r25, r25
 27a:	89 2b       	or	r24, r25
 27c:	b1 f3       	breq	.-20     	; 0x26a <uart_putch+0x12>
 27e:	86 ec       	ldi	r24, 0xC6	; 198
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	29 81       	ldd	r18, Y+1	; 0x01
 284:	fc 01       	movw	r30, r24
 286:	20 83       	st	Z, r18
 288:	80 e0       	ldi	r24, 0x00	; 0
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	0f 90       	pop	r0
 28e:	0f 90       	pop	r0
 290:	0f 90       	pop	r0
 292:	df 91       	pop	r29
 294:	cf 91       	pop	r28
 296:	08 95       	ret

00000298 <Enable_UART_Receive_Interrupt>:
 298:	cf 93       	push	r28
 29a:	df 93       	push	r29
 29c:	cd b7       	in	r28, 0x3d	; 61
 29e:	de b7       	in	r29, 0x3e	; 62
 2a0:	81 ec       	ldi	r24, 0xC1	; 193
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	21 ec       	ldi	r18, 0xC1	; 193
 2a6:	30 e0       	ldi	r19, 0x00	; 0
 2a8:	f9 01       	movw	r30, r18
 2aa:	20 81       	ld	r18, Z
 2ac:	20 68       	ori	r18, 0x80	; 128
 2ae:	fc 01       	movw	r30, r24
 2b0:	20 83       	st	Z, r18
 2b2:	00 00       	nop
 2b4:	df 91       	pop	r29
 2b6:	cf 91       	pop	r28
 2b8:	08 95       	ret

000002ba <__vector_25>:

ISR(USR0_Vect_Num)
{
 2ba:	1f 92       	push	r1
 2bc:	0f 92       	push	r0
 2be:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
 2c2:	0f 92       	push	r0
 2c4:	11 24       	eor	r1, r1
 2c6:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
 2ca:	0f 92       	push	r0
 2cc:	2f 93       	push	r18
 2ce:	3f 93       	push	r19
 2d0:	4f 93       	push	r20
 2d2:	5f 93       	push	r21
 2d4:	6f 93       	push	r22
 2d6:	7f 93       	push	r23
 2d8:	8f 93       	push	r24
 2da:	9f 93       	push	r25
 2dc:	af 93       	push	r26
 2de:	bf 93       	push	r27
 2e0:	ef 93       	push	r30
 2e2:	ff 93       	push	r31
 2e4:	cf 93       	push	r28
 2e6:	df 93       	push	r29
 2e8:	1f 92       	push	r1
 2ea:	cd b7       	in	r28, 0x3d	; 61
 2ec:	de b7       	in	r29, 0x3e	; 62
	char ReceivedByte;
	ReceivedByte = UDR0;
 2ee:	86 ec       	ldi	r24, 0xC6	; 198
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	fc 01       	movw	r30, r24
 2f4:	80 81       	ld	r24, Z
 2f6:	89 83       	std	Y+1, r24	; 0x01
	ConvertReceivedChar(&ReceivedByte);
 2f8:	ce 01       	movw	r24, r28
 2fa:	01 96       	adiw	r24, 0x01	; 1
 2fc:	13 df       	rcall	.-474    	; 0x124 <ConvertReceivedChar>
	UDR0 = ReceivedByte; // Echo back the received byte converted to the computer
 2fe:	86 ec       	ldi	r24, 0xC6	; 198
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	29 81       	ldd	r18, Y+1	; 0x01
 304:	fc 01       	movw	r30, r24
 306:	20 83       	st	Z, r18
	sei();
 308:	78 94       	sei
}
 30a:	00 00       	nop
 30c:	0f 90       	pop	r0
 30e:	df 91       	pop	r29
 310:	cf 91       	pop	r28
 312:	ff 91       	pop	r31
 314:	ef 91       	pop	r30
 316:	bf 91       	pop	r27
 318:	af 91       	pop	r26
 31a:	9f 91       	pop	r25
 31c:	8f 91       	pop	r24
 31e:	7f 91       	pop	r23
 320:	6f 91       	pop	r22
 322:	5f 91       	pop	r21
 324:	4f 91       	pop	r20
 326:	3f 91       	pop	r19
 328:	2f 91       	pop	r18
 32a:	0f 90       	pop	r0
 32c:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
 330:	0f 90       	pop	r0
 332:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
 336:	0f 90       	pop	r0
 338:	1f 90       	pop	r1
 33a:	18 95       	reti

0000033c <puts>:
 33c:	0f 93       	push	r16
 33e:	1f 93       	push	r17
 340:	cf 93       	push	r28
 342:	df 93       	push	r29
 344:	e0 91 40 02 	lds	r30, 0x0240	; 0x800240 <__data_end+0x2>
 348:	f0 91 41 02 	lds	r31, 0x0241	; 0x800241 <__data_end+0x3>
 34c:	23 81       	ldd	r18, Z+3	; 0x03
 34e:	21 ff       	sbrs	r18, 1
 350:	1b c0       	rjmp	.+54     	; 0x388 <puts+0x4c>
 352:	8c 01       	movw	r16, r24
 354:	d0 e0       	ldi	r29, 0x00	; 0
 356:	c0 e0       	ldi	r28, 0x00	; 0
 358:	f8 01       	movw	r30, r16
 35a:	81 91       	ld	r24, Z+
 35c:	8f 01       	movw	r16, r30
 35e:	60 91 40 02 	lds	r22, 0x0240	; 0x800240 <__data_end+0x2>
 362:	70 91 41 02 	lds	r23, 0x0241	; 0x800241 <__data_end+0x3>
 366:	db 01       	movw	r26, r22
 368:	18 96       	adiw	r26, 0x08	; 8
 36a:	ed 91       	ld	r30, X+
 36c:	fc 91       	ld	r31, X
 36e:	19 97       	sbiw	r26, 0x09	; 9
 370:	88 23       	and	r24, r24
 372:	31 f0       	breq	.+12     	; 0x380 <puts+0x44>
 374:	19 95       	eicall
 376:	89 2b       	or	r24, r25
 378:	79 f3       	breq	.-34     	; 0x358 <puts+0x1c>
 37a:	df ef       	ldi	r29, 0xFF	; 255
 37c:	cf ef       	ldi	r28, 0xFF	; 255
 37e:	ec cf       	rjmp	.-40     	; 0x358 <puts+0x1c>
 380:	8a e0       	ldi	r24, 0x0A	; 10
 382:	19 95       	eicall
 384:	89 2b       	or	r24, r25
 386:	19 f0       	breq	.+6      	; 0x38e <puts+0x52>
 388:	8f ef       	ldi	r24, 0xFF	; 255
 38a:	9f ef       	ldi	r25, 0xFF	; 255
 38c:	02 c0       	rjmp	.+4      	; 0x392 <puts+0x56>
 38e:	8d 2f       	mov	r24, r29
 390:	9c 2f       	mov	r25, r28
 392:	df 91       	pop	r29
 394:	cf 91       	pop	r28
 396:	1f 91       	pop	r17
 398:	0f 91       	pop	r16
 39a:	08 95       	ret

0000039c <_exit>:
 39c:	f8 94       	cli

0000039e <__stop_program>:
 39e:	ff cf       	rjmp	.-2      	; 0x39e <__stop_program>
