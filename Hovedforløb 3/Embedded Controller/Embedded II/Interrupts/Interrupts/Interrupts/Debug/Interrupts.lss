
Interrupts.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b0  00800100  00000266  000002fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000266  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  008001b0  008001b0  000003aa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003aa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00000418  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bec  00000000  00000000  000004c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008e5  00000000  00000000  000010b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000477  00000000  00000000  00001999  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000170  00000000  00000000  00001e10  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004d8  00000000  00000000  00001f80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000015f  00000000  00000000  00002458  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  000025b7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e6       	ldi	r30, 0x66	; 102
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 3b       	cpi	r26, 0xB0	; 176
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 eb       	ldi	r26, 0xB0	; 176
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 3b       	cpi	r26, 0xB6	; 182
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 31 01 	jmp	0x262	; 0x262 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
#define toggleBit(reg, bit) (reg = reg ^ (1 << bit))
#define clearFlag(reg, bit) (reg = reg | (1 << bit))

int main(void)
{
	RS232Init();
  a6:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <RS232Init>
	Enable_UART_Receive_Interrupt();
  aa:	0e 94 e6 00 	call	0x1cc	; 0x1cc <Enable_UART_Receive_Interrupt>
	printf("Start of main\n");
  ae:	8c e1       	ldi	r24, 0x1C	; 28
  b0:	91 e0       	ldi	r25, 0x01	; 1
  b2:	0e 94 01 01 	call	0x202	; 0x202 <puts>
	SetupTimer();
  b6:	0e 94 71 00 	call	0xe2	; 0xe2 <SetupTimer>
	printf("End of setup in main\n");
  ba:	8a e2       	ldi	r24, 0x2A	; 42
  bc:	91 e0       	ldi	r25, 0x01	; 1
  be:	0e 94 01 01 	call	0x202	; 0x202 <puts>
	sei();
  c2:	78 94       	sei
  c4:	ff cf       	rjmp	.-2      	; 0xc4 <main+0x1e>

000000c6 <EnableTimer>:
void DisableTimer() {
	printf("Disabling timer\n");
	
	
	
	printf("Timer disabled\n");
  c6:	8f e3       	ldi	r24, 0x3F	; 63
  c8:	91 e0       	ldi	r25, 0x01	; 1
  ca:	0e 94 01 01 	call	0x202	; 0x202 <puts>
  ce:	ef e6       	ldi	r30, 0x6F	; 111
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	82 60       	ori	r24, 0x02	; 2
  d6:	80 83       	st	Z, r24
  d8:	8e e4       	ldi	r24, 0x4E	; 78
  da:	91 e0       	ldi	r25, 0x01	; 1
  dc:	0e 94 01 01 	call	0x202	; 0x202 <puts>
  e0:	08 95       	ret

000000e2 <SetupTimer>:
  e2:	8c e5       	ldi	r24, 0x5C	; 92
  e4:	91 e0       	ldi	r25, 0x01	; 1
  e6:	0e 94 01 01 	call	0x202	; 0x202 <puts>
  ea:	e1 e8       	ldi	r30, 0x81	; 129
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	80 81       	ld	r24, Z
  f0:	84 60       	ori	r24, 0x04	; 4
  f2:	80 83       	st	Z, r24
  f4:	a8 e8       	ldi	r26, 0x88	; 136
  f6:	b0 e0       	ldi	r27, 0x00	; 0
  f8:	8d 91       	ld	r24, X+
  fa:	9c 91       	ld	r25, X
  fc:	11 97       	sbiw	r26, 0x01	; 1
  fe:	84 62       	ori	r24, 0x24	; 36
 100:	94 6f       	ori	r25, 0xF4	; 244
 102:	11 96       	adiw	r26, 0x01	; 1
 104:	9c 93       	st	X, r25
 106:	8e 93       	st	-X, r24
 108:	80 81       	ld	r24, Z
 10a:	88 60       	ori	r24, 0x08	; 8
 10c:	80 83       	st	Z, r24
 10e:	0e 94 63 00 	call	0xc6	; 0xc6 <EnableTimer>
 112:	8d e6       	ldi	r24, 0x6D	; 109
 114:	91 e0       	ldi	r25, 0x01	; 1
 116:	0e 94 01 01 	call	0x202	; 0x202 <puts>
 11a:	08 95       	ret

0000011c <__vector_11>:
}

ISR(TIMER1_COMPA_vect) {
 11c:	1f 92       	push	r1
 11e:	0f 92       	push	r0
 120:	0f b6       	in	r0, 0x3f	; 63
 122:	0f 92       	push	r0
 124:	11 24       	eor	r1, r1
 126:	2f 93       	push	r18
 128:	3f 93       	push	r19
 12a:	4f 93       	push	r20
 12c:	5f 93       	push	r21
 12e:	6f 93       	push	r22
 130:	7f 93       	push	r23
 132:	8f 93       	push	r24
 134:	9f 93       	push	r25
 136:	af 93       	push	r26
 138:	bf 93       	push	r27
 13a:	ef 93       	push	r30
 13c:	ff 93       	push	r31
	printf("\n\nInterrupt proceeded\n\n");
 13e:	89 e9       	ldi	r24, 0x99	; 153
 140:	91 e0       	ldi	r25, 0x01	; 1
 142:	0e 94 01 01 	call	0x202	; 0x202 <puts>
	
	sei();
 146:	78 94       	sei
 148:	ff 91       	pop	r31
 14a:	ef 91       	pop	r30
 14c:	bf 91       	pop	r27
 14e:	af 91       	pop	r26
 150:	9f 91       	pop	r25
 152:	8f 91       	pop	r24
 154:	7f 91       	pop	r23
 156:	6f 91       	pop	r22
 158:	5f 91       	pop	r21
 15a:	4f 91       	pop	r20
 15c:	3f 91       	pop	r19
 15e:	2f 91       	pop	r18
 160:	0f 90       	pop	r0
 162:	0f be       	out	0x3f, r0	; 63
 164:	0f 90       	pop	r0
 166:	1f 90       	pop	r1
 168:	18 95       	reti

0000016a <uart_getch>:
	UCSR0B |= (1 << RXCIE0); // Enable the USART Receive Complete interrupt (USART_RXC)
}

void Disable_UART_Receive_Interupt()
{
	UCSR0B &= ~(1 << RXCIE0); // Disable the USART Receive Complete interrupt (USART_RXC)
 16a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7fc0c0>
 16e:	88 23       	and	r24, r24
 170:	e4 f7       	brge	.-8      	; 0x16a <uart_getch>
 172:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7fc0c6>
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	08 95       	ret

0000017a <uart_putch>:
 17a:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7fc0c0>
 17e:	95 ff       	sbrs	r25, 5
 180:	fc cf       	rjmp	.-8      	; 0x17a <uart_putch>
 182:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7fc0c6>
 186:	80 e0       	ldi	r24, 0x00	; 0
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	08 95       	ret

0000018c <SetupOutputStreamToUart>:
 18c:	8e e0       	ldi	r24, 0x0E	; 14
 18e:	91 e0       	ldi	r25, 0x01	; 1
 190:	90 93 b3 01 	sts	0x01B3, r25	; 0x8001b3 <__data_end+0x3>
 194:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <__data_end+0x2>
 198:	08 95       	ret

0000019a <SetupInputStreamToUart>:
 19a:	80 e0       	ldi	r24, 0x00	; 0
 19c:	91 e0       	ldi	r25, 0x01	; 1
 19e:	90 93 b1 01 	sts	0x01B1, r25	; 0x8001b1 <__data_end+0x1>
 1a2:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <__data_end>
 1a6:	08 95       	ret

000001a8 <RS232Init>:
 1a8:	87 e6       	ldi	r24, 0x67	; 103
 1aa:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7fc0c4>
 1ae:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7fc0c5>
 1b2:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7fc0c0>
 1b6:	88 e1       	ldi	r24, 0x18	; 24
 1b8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7fc0c1>
 1bc:	86 e0       	ldi	r24, 0x06	; 6
 1be:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7fc0c2>
 1c2:	0e 94 c6 00 	call	0x18c	; 0x18c <SetupOutputStreamToUart>
 1c6:	0e 94 cd 00 	call	0x19a	; 0x19a <SetupInputStreamToUart>
 1ca:	08 95       	ret

000001cc <Enable_UART_Receive_Interrupt>:
 1cc:	e1 ec       	ldi	r30, 0xC1	; 193
 1ce:	f0 e0       	ldi	r31, 0x00	; 0
 1d0:	80 81       	ld	r24, Z
 1d2:	80 68       	ori	r24, 0x80	; 128
 1d4:	80 83       	st	Z, r24
 1d6:	08 95       	ret

000001d8 <__vector_18>:
}

ISR(USR0_Vect_Num)
{
 1d8:	1f 92       	push	r1
 1da:	0f 92       	push	r0
 1dc:	0f b6       	in	r0, 0x3f	; 63
 1de:	0f 92       	push	r0
 1e0:	11 24       	eor	r1, r1
 1e2:	8f 93       	push	r24
 1e4:	ef 93       	push	r30
 1e6:	ff 93       	push	r31
	char ReceivedByte = UDR0;
 1e8:	e6 ec       	ldi	r30, 0xC6	; 198
 1ea:	f0 e0       	ldi	r31, 0x00	; 0
 1ec:	80 81       	ld	r24, Z
	//ConvertReceivedChar(&ReceivedByte);
	UDR0 = ReceivedByte; // Echo back the received byte converted to the computer
 1ee:	80 83       	st	Z, r24
	sei();
 1f0:	78 94       	sei
}
 1f2:	ff 91       	pop	r31
 1f4:	ef 91       	pop	r30
 1f6:	8f 91       	pop	r24
 1f8:	0f 90       	pop	r0
 1fa:	0f be       	out	0x3f, r0	; 63
 1fc:	0f 90       	pop	r0
 1fe:	1f 90       	pop	r1
 200:	18 95       	reti

00000202 <puts>:
 202:	0f 93       	push	r16
 204:	1f 93       	push	r17
 206:	cf 93       	push	r28
 208:	df 93       	push	r29
 20a:	e0 91 b2 01 	lds	r30, 0x01B2	; 0x8001b2 <__data_end+0x2>
 20e:	f0 91 b3 01 	lds	r31, 0x01B3	; 0x8001b3 <__data_end+0x3>
 212:	23 81       	ldd	r18, Z+3	; 0x03
 214:	21 ff       	sbrs	r18, 1
 216:	1b c0       	rjmp	.+54     	; 0x24e <puts+0x4c>
 218:	8c 01       	movw	r16, r24
 21a:	d0 e0       	ldi	r29, 0x00	; 0
 21c:	c0 e0       	ldi	r28, 0x00	; 0
 21e:	f8 01       	movw	r30, r16
 220:	81 91       	ld	r24, Z+
 222:	8f 01       	movw	r16, r30
 224:	60 91 b2 01 	lds	r22, 0x01B2	; 0x8001b2 <__data_end+0x2>
 228:	70 91 b3 01 	lds	r23, 0x01B3	; 0x8001b3 <__data_end+0x3>
 22c:	db 01       	movw	r26, r22
 22e:	18 96       	adiw	r26, 0x08	; 8
 230:	ed 91       	ld	r30, X+
 232:	fc 91       	ld	r31, X
 234:	19 97       	sbiw	r26, 0x09	; 9
 236:	88 23       	and	r24, r24
 238:	31 f0       	breq	.+12     	; 0x246 <puts+0x44>
 23a:	09 95       	icall
 23c:	89 2b       	or	r24, r25
 23e:	79 f3       	breq	.-34     	; 0x21e <puts+0x1c>
 240:	df ef       	ldi	r29, 0xFF	; 255
 242:	cf ef       	ldi	r28, 0xFF	; 255
 244:	ec cf       	rjmp	.-40     	; 0x21e <puts+0x1c>
 246:	8a e0       	ldi	r24, 0x0A	; 10
 248:	09 95       	icall
 24a:	89 2b       	or	r24, r25
 24c:	19 f0       	breq	.+6      	; 0x254 <puts+0x52>
 24e:	8f ef       	ldi	r24, 0xFF	; 255
 250:	9f ef       	ldi	r25, 0xFF	; 255
 252:	02 c0       	rjmp	.+4      	; 0x258 <puts+0x56>
 254:	8d 2f       	mov	r24, r29
 256:	9c 2f       	mov	r25, r28
 258:	df 91       	pop	r29
 25a:	cf 91       	pop	r28
 25c:	1f 91       	pop	r17
 25e:	0f 91       	pop	r16
 260:	08 95       	ret

00000262 <_exit>:
 262:	f8 94       	cli

00000264 <__stop_program>:
 264:	ff cf       	rjmp	.-2      	; 0x264 <__stop_program>
